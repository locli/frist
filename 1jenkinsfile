pipeline {
	environment {
		devOpenshiftUrl		=	"api.ocp4.test.fu.igotit.co.kr:6443"
		devOpenshiftUser	=	"jslee"
		devNameSpace		=	"kb"

		devRegistry			=	"default-route-openshift-image-registry.apps.ocp4.test.fu.igotit.co.kr"
		devTag				=	"latest"
		devApplication		=	"rca2-motp"
	}
  
  agent any
  
  stages {
      stage('OpenshiftLogin'){
          steps {
             script{
                 echo "Openshift Token 설정"
					       beforeTm1 = sh(script: "date +%s", returnStdout: true).trim() as Integer
                 
                 withCredentials([usernamePassword(credentialsId: devOpenshiftUser, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
							       sh "oc login https://"+ devOpenshiftUrl +" -u $USERNAME -p $PASSWORD --insecure-skip-tls-verify=true" 
						     }
                 devOpenshiftToken = sh(script: "oc whoami -t", returnStdout: true).trim()
        				 beforeTm2 = sh(script: "date +%s", returnStdout: true).trim() as Integer
             }
          }
      }
      
      stage('Build - Docker'){
			    steps{
				      script{
					        echo "Openshift Docker Build 수행"
					        beforeTm1 = sh(script: "date +%s", returnStdout: true).trim() as Integer
						      def dockerfile = sh(
							        returnStdout: true,
							        script:"""
cat <<EOF > Dockerfile
FROM registry.redhat.io/jboss-webserver-3/webserver31-tomcat8-openshift:1.4-28
COPY Lab6A.war /deployments/
#FROM ${devRegistry}/${devNameSpace}/rca-builder:latest
#COPY ./*.jar /deployments/
EOF"""
						      )

                  sh "docker login -u "+devOpenshiftUser+" -p " +devOpenshiftToken+" "+devRegistry
                  dockerImage = docker.build(devRegistry+"/"+devNameSpace+"/"+devApplication+":"+devTag, "--pull .")
                  docker.withRegistry("http://"+devRegistry){
                      dockerImage.push(devTag)
                  }

						 //    def image = ${devRegistry}/${devNameSpace}/${devApplication}
						 //    def count = sh(script:"docker images "+image+" -f dangling=true -q | wc -l", returnStdout: true).trim() as Integer

						 //    if( count > 0 ) {
						//	       echo "Docker 이미지지 clean up 수행"
						//	       for (seq=count+1 ; seq>1 ; seq--) {
						//		         def digest = sh(returnStdout: true, script:"docker images ${image} -f dangling=ture --digests | awk '{print \$3}' | sed -n ${seq}p").trim()
						//		         def image_with_digest = image+"@"+digest
						//		         sh "docker rmi ${image_with_diges}"
						//	       }
						//	       echo "Docker 이미지지 clean up 완료"
						 //    }

						     
					       beforeTm2 = sh(script: "date +%s", returnStdout: true).trim() as Integer
				}
			}
		}
    
    stage('Deploy'){
        steps {
        		script {
                echo "Openshift Docker deploy 수행"
        			  beforeTm1 = sh(script: "date +%s", returnStdout: true).trim() as Integer
         			  openshift.withCluster('insecure://'+devOpenshiftUrl, devOpenshiftToken){
                
                    openshift.withProject(devNameSpace){
            				//def created = openshift.process(readFile(file:'OpenshfitDeployment.yaml'), "-p", "APPLICATION_NAME="+devApplication, "-p", "PROJECT_NAME="+devNameSpace, "-p", "IMAGE_NAME="+devApplication)
            				//def applySelector = openshift.apply(readFile(file:'OpenshfitDeployment.yaml'))
            				//application rollout
            				def dcSelector = openshift.selector('dc', devApplication)
            				def rm = dcSelector.rollout()
        		    		def podStatus = rm.status()
        				    if (!"${podStatus.out}".contains('Waiting')){
        					      rm.latest()
        					      rm.status()
        				    }
		      }
                    }                
                }
            }
         }
    }

}
